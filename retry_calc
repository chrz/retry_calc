<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AWS Step Functions Exponential Retry Calculator</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            min-height: 100vh;
        }
        
        function findOptimal() {
            const maxRetries = parseInt(document.getElementById('maxRetries').value);
            const targetDays = parseFloat(document.getElementById('targetDays').value);
            const maxDelay = parseInt(document.getElementById('maxDelay').value);
            const backoffRate = parseFloat(document.getElementById('backoffRate').value);
            
            const targetSeconds = targetDays * 24 * 60 * 60;
            
            // Calculate optimal intervalSeconds
            let intervalSeconds = findOptimalInterval(maxRetries, targetSeconds, maxDelay, backoffRate);
            
            // Update the input field
            document.getElementById('intervalSeconds').value = intervalSeconds;
            
            // Calculate actual timeline
            const timeline = calculateTimeline(intervalSeconds, backoffRate, maxDelay, maxRetries);
            const totalTime = timeline[timeline.length - 1].cumulativeSeconds;
            
            // Display results
            displayResults(intervalSeconds, backoffRate, maxDelay, maxRetries, totalTime, targetSeconds, timeline);
        }
        
        .container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }
        
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            background: linear-gradient(45deg, #6c757d, #495057);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .input-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .input-field {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 15px;
            transition: all 0.3s ease;
        }
        
        .input-field:focus-within {
            border-color: #6c757d;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.15);
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #495057;
        }
        
        input {
            width: 100%;
            border: none;
            background: transparent;
            font-size: 16px;
            outline: none;
            color: #2c3e50;
        }
        
        .calculate-btn {
            background: linear-gradient(45deg, #6c757d, #495057);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 12px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: block;
            margin: 0 auto 30px;
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.3);
        }
        
        .calculate-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 35px rgba(108, 117, 125, 0.4);
        }
        
        .results {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-top: 30px;
        }
        
        .result-card {
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            border-radius: 15px;
            padding: 25px;
            color: white;
            box-shadow: 0 10px 30px rgba(108, 117, 125, 0.3);
        }
        
        .result-card h3 {
            margin-top: 0;
            font-size: 1.4em;
            margin-bottom: 15px;
        }
        
        .config-code {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px;
            border-radius: 12px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 14px;
            overflow-x: auto;
            white-space: pre;
            margin: 20px 0;
            box-shadow: inset 0 2px 10px rgba(0,0,0,0.3);
        }
        
        .timeline {
            background: #fff;
            border-radius: 15px;
            padding: 25px;
            margin-top: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .timeline h3 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.4em;
        }
        
        .timeline-item {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid #f1f3f4;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 13px;
        }
        
        .timeline-item:last-child {
            border-bottom: none;
        }
        
        .retry-num {
            font-weight: bold;
            color: #6c757d;
            min-width: 80px;
        }
        
        .delay-time {
            color: #6c757d;
        }
        
        .cumulative-time {
            color: #28a745;
            font-weight: bold;
        }
        
        @media (max-width: 768px) {
            .results {
                grid-template-columns: 1fr;
            }
            
            .timeline-item {
                flex-direction: column;
                gap: 5px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>AWS Step Functions Exponential Retry Calculator</h1>
        
        <div class="input-group">
            <div class="input-field">
                <label for="maxRetries">Max Retries:</label>
                <input type="number" id="maxRetries" value="25">
            </div>
            <div class="input-field">
                <label for="targetDays">Target Total Time (days):</label>
                <input type="number" id="targetDays" value="5" step="0.1">
            </div>
            <div class="input-field">
                <label for="maxDelay">Max Delay (seconds):</label>
                <input type="number" id="maxDelay" value="86400">
            </div>
            <div class="input-field">
                <label for="backoffRate">Backoff Rate:</label>
                <input type="number" id="backoffRate" value="2.0" step="0.1">
            </div>
            <div class="input-field">
                <label for="intervalSeconds">Interval Seconds:</label>
                <input type="number" id="intervalSeconds" value="675" step="1">
            </div>
        </div>
        
        <button class="calculate-btn" onclick="calculateRetry()">Calculate with Current Parameters</button>
        
        <button class="calculate-btn" onclick="findOptimal()" style="margin-top: 10px; background: linear-gradient(45deg, #868e96, #6c757d);">Find Optimal Interval for Target Time</button>
        
        <div class="results" id="results" style="display: none;">
            <div class="result-card">
                <h3>Calculated Parameters</h3>
                <div id="parameters"></div>
            </div>
            <div class="result-card">
                <h3>Summary</h3>
                <div id="summary"></div>
            </div>
        </div>
        
        <div id="configCode" style="display: none;">
            <h3 style="color: #2c3e50; margin-bottom: 15px;">AWS Step Functions Retry Configuration</h3>
            <div class="config-code" id="jsonConfig"></div>
        </div>
        
        <div class="timeline" id="timeline" style="display: none;">
            <h3>Retry Timeline</h3>
            <div id="timelineContent"></div>
        </div>
    </div>

    <script>
        function calculateRetry() {
            const maxRetries = parseInt(document.getElementById('maxRetries').value);
            const targetDays = parseFloat(document.getElementById('targetDays').value);
            const maxDelay = parseInt(document.getElementById('maxDelay').value);
            const backoffRate = parseFloat(document.getElementById('backoffRate').value);
            const intervalSeconds = parseInt(document.getElementById('intervalSeconds').value);
            
            const targetSeconds = targetDays * 24 * 60 * 60;
            
            // Calculate actual timeline with provided intervalSeconds
            const timeline = calculateTimeline(intervalSeconds, backoffRate, maxDelay, maxRetries);
            const totalTime = timeline[timeline.length - 1].cumulativeSeconds;
            
            // Display results
            displayResults(intervalSeconds, backoffRate, maxDelay, maxRetries, totalTime, targetSeconds, timeline);
        }
        
        function findOptimalInterval(maxRetries, targetSeconds, maxDelay, backoffRate) {
            let bestInterval = 1;
            let bestDifference = Infinity;
            
            // Try different interval values
            for (let interval = 1; interval <= 3600; interval++) {
                const timeline = calculateTimeline(interval, backoffRate, maxDelay, maxRetries);
                const totalTime = timeline[timeline.length - 1].cumulativeSeconds;
                const difference = Math.abs(totalTime - targetSeconds);
                
                if (difference < bestDifference) {
                    bestDifference = difference;
                    bestInterval = interval;
                }
            }
            
            return bestInterval;
        }
        
        function calculateTimeline(intervalSeconds, backoffRate, maxDelay, maxRetries) {
            const timeline = [];
            let cumulativeSeconds = 0;
            
            for (let retry = 1; retry <= maxRetries; retry++) {
                let delay = intervalSeconds * Math.pow(backoffRate, retry - 1);
                delay = Math.min(delay, maxDelay);
                
                cumulativeSeconds += delay;
                
                timeline.push({
                    retry: retry,
                    delaySeconds: Math.round(delay),
                    cumulativeSeconds: cumulativeSeconds
                });
            }
            
            return timeline;
        }
        
        function displayResults(intervalSeconds, backoffRate, maxDelay, maxRetries, totalTime, targetSeconds, timeline) {
            document.getElementById('results').style.display = 'grid';
            document.getElementById('configCode').style.display = 'block';
            document.getElementById('timeline').style.display = 'block';
            
            // Parameters
            document.getElementById('parameters').innerHTML = `
                <strong>Interval Seconds:</strong> ${intervalSeconds}<br>
                <strong>Backoff Rate:</strong> ${backoffRate}<br>
                <strong>Max Delay:</strong> ${maxDelay} seconds (${maxDelay/3600} hours)<br>
                <strong>Max Retries:</strong> ${maxRetries}
            `;
            
            // Summary
            const totalHours = (totalTime / 3600).toFixed(2);
            const totalDays = (totalTime / 86400).toFixed(2);
            const targetDays = (targetSeconds / 86400).toFixed(2);
            const difference = Math.abs(totalTime - targetSeconds);
            const differenceHours = (difference / 3600).toFixed(2);
            
            document.getElementById('summary').innerHTML = `
                <strong>Total Time:</strong> ${totalDays} days (${totalHours} hours)<br>
                <strong>Target Time:</strong> ${targetDays} days<br>
                <strong>Difference:</strong> ${differenceHours} hours<br>
                <strong>Final Retry At:</strong> ${formatDuration(totalTime)}
            `;
            
            // JSON Configuration
            const config = {
                "ErrorEquals": ["States.ALL"],
                "IntervalSeconds": intervalSeconds,
                "MaxAttempts": maxRetries,
                "BackoffRate": backoffRate,
                "MaxDelaySeconds": maxDelay
            };
            
            document.getElementById('jsonConfig').textContent = JSON.stringify(config, null, 2);
            
            // Timeline
            let timelineHTML = '';
            timeline.forEach(item => {
                timelineHTML += `
                    <div class="timeline-item">
                        <span class="retry-num">Retry ${item.retry}:</span>
                        <span class="delay-time">Wait ${formatDuration(item.delaySeconds)}</span>
                        <span class="cumulative-time">Total: ${formatDuration(item.cumulativeSeconds)}</span>
                    </div>
                `;
            });
            
            document.getElementById('timelineContent').innerHTML = timelineHTML;
        }
        
        function formatDuration(seconds) {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const mins = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);
            
            if (days > 0) {
                return `${days}d ${hours}h ${mins}m`;
            } else if (hours > 0) {
                return `${hours}h ${mins}m ${secs}s`;
            } else if (mins > 0) {
                return `${mins}m ${secs}s`;
            } else {
                return `${secs}s`;
            }
        }
        
        // Calculate on page load
        calculateRetry();
    </script>
</body>
</html>
